///////////////////////////////////////////////////////////////////////////
// C++ code generated with wxFormBuilder (version 4.1.0-0-g733bf3d)
// http://www.wxformbuilder.org/
//
// PLEASE DO *NOT* EDIT THIS FILE!
///////////////////////////////////////////////////////////////////////////

#pragma once

#include <wx/artprov.h>
#include <wx/xrc/xmlres.h>
#include <wx/string.h>
#include <wx/stattext.h>
#include <wx/gdicmn.h>
#include <wx/font.h>
#include <wx/colour.h>
#include <wx/settings.h>
#include <wx/sizer.h>
#include <wx/button.h>
#include <wx/bitmap.h>
#include <wx/image.h>
#include <wx/icon.h>
#include <wx/choice.h>
#include <wx/gauge.h>
#include <wx/scrolwin.h>
#include <wx/frame.h>

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @class MyFrame1
/// @brief Class generated by wxFormBuilder. Serves as the base class for the main application frame.
///////////////////////////////////////////////////////////////////////////////
class MyFrame1 : public wxFrame
{
private:

protected:
    wxStaticText* m_staticText_source_text; ///< Static text for source selection.
    wxButton* m_button_source_select; ///< Button to select source directory.
    wxStaticText* m_staticText_destination_choice; ///< Static text for destination selection.
    wxButton* m_button_destination_select; ///< Button to select destination directory.
    wxStaticText* m_staticText_dimensions; ///< Static text for dimensions.
    wxChoice* m_choice_measurements; ///< Choice control for selecting dimensions.
    wxStaticText* m_staticText_format; ///< Static text for format selection.
    wxChoice* m_choice_format; ///< Choice control for selecting format.
    wxStaticText* m_staticText_compression; ///< Static text for compression level.
    wxChoice* m_choice_compression; ///< Choice control for selecting compression level.
    wxStaticText* m_staticText_selected_source_const; ///< Static text label for selected source.
    wxStaticText* m_staticText_selected_source; ///< Static text displaying the selected source.
    wxStaticText* m_staticText_selected_destination_const; ///< Static text label for selected destination.
    wxStaticText* m_staticText_selected_destination_text; ///< Static text displaying the selected destination.
    wxStaticText* m_staticText_amount_const; ///< Static text label for amount of images.
    wxStaticText* m_staticText_amount; ///< Static text displaying the amount of images.
    wxStaticText* m_staticText_created_thumbnails; ///< Static text for created thumbnails.
    wxGauge* m_gauge_done_tasks; ///< Gauge control for displaying progress.
    wxButton* m_button_rotation_left; ///< Button to rotate image left.
    wxButton* m_button_rotation_right; ///< Button to rotate image right.
    wxButton* m_button_next_thumbnail; ///< Button to process the next thumbnail.
    wxScrolledWindow* m_scrolledWindow1; ///< Scrolled window for displaying images.

    /**
     * @brief Handles the event when the source select button is clicked.
     * @param event The event object.
     */
    virtual void m_button_source_selectOnButtonClick(wxCommandEvent& event) { event.Skip(); }

    /**
     * @brief Handles the event when the destination select button is clicked.
     * @param event The event object.
     */
    virtual void m_button_destination_selectOnButtonClick(wxCommandEvent& event) { event.Skip(); }

    /**
     * @brief Handles the event when a measurement choice is made.
     * @param event The event object.
     */
    virtual void m_choice_measurementsOnChoice(wxCommandEvent& event) { event.Skip(); }

    /**
     * @brief Handles the event when a compression choice is made.
     * @param event The event object.
     */
    virtual void m_choice_compressionOnChoice(wxCommandEvent& event) { event.Skip(); }

    /**
     * @brief Handles the event when the left rotation button is clicked.
     * @param event The event object.
     */
    virtual void m_button_rotation_leftOnButtonClick(wxCommandEvent& event) { event.Skip(); }

    /**
     * @brief Handles the event when the right rotation button is clicked.
     * @param event The event object.
     */
    virtual void m_button_rotation_rightOnButtonClick(wxCommandEvent& event) { event.Skip(); }

    /**
     * @brief Handles the event when the next thumbnail button is clicked.
     * @param event The event object.
     */
    virtual void m_button_next_thumbnailOnButtonClick(wxCommandEvent& event) { event.Skip(); }

public:

    /**
     * @brief Constructor for MyFrame1.
     * @param parent The parent window.
     * @param id The window ID.
     * @param title The title of the frame.
     * @param pos The position of the frame.
     * @param size The size of the frame.
     * @param style The style of the frame.
     */
    MyFrame1(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Photo organizing"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(900, 600), long style = wxDEFAULT_FRAME_STYLE | wxTAB_TRAVERSAL);

    /**
     * @brief Destructor for MyFrame1.
     */
    ~MyFrame1();
};

